/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

/**
 * Gets the path of the directory which contains the app configurations
 */
export function getAppConfigDirPath() {
    return invoke()<string>("get_app_config_dir_path")
}

/**
 * Gets the data from config.toml
 */
export function getAppConfig() {
    return invoke()<AppConfig>("get_app_config")
}

/**
 * Write the app config to config.toml
 */
export function writeAppConfig(config: AppConfig) {
    return invoke()<null>("write_app_config", { config })
}

/**
 * Get the data from instances.toml
 */
export function getInstancesToml() {
    return invoke()<InstancesToml>("get_instances_toml")
}

/**
 * Write instances data to instances.toml
 */
export function writeInstanceToml(config: InstancesToml) {
    return invoke()<null>("write_instance_toml", { config })
}

export type Modloader = "Vanilla" | "Fabric" | "Forge" | "Quilt"
export type InstancesToml = { Instance: NexusInstance[] }
export type AppConfig = { metadata_dir: string; default_instances_dir: string }
export type NexusInstance = { id: string; install_stage: InstanceInstallStage; name: string; game_version: string; modloader: Modloader; loader_version: string | null; path: string }
export type InstanceInstallStage = "Installed" | "Installing" | "Cancelled" | "None"
